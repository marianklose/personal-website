{
  "hash": "c2bef7021d4ef573701e2f5fb3574d15",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My attempt to understand NLME estimation algorithms in NONMEM\"\ndescription: \"Trying to make sense of NLME estimation in NONMEM as a non-mathematician\"\nauthor:\n  - name: Marian Klose\n    url: https://github.com/marianklose\n    orcid: 0009-0005-1706-6289\ndate: 10-10-2024\ncategories: [Estimation, NONMEM, Laplacian, FOCE, FO] \nimage: preview.png\nbibliography: C:/Users/maria/Desktop/bibliography.bib\ndraft: true \necho: true\nexecute:\n  echo: true\n  message: false\n  warning: false\nformat:\n  html:\n    number-sections: false\n    toc: true\n    code-fold: true\n    code-tools: true\n---\n\n\n\n\n\n# Theory\n\n## Statistical model\n\nIn our little example we assume to have a (simple) hierarchical nonlinear mixed-effects (NLME) model, for which we want to conduct a parameter estimation step. To my understanding the hierarchical structure is given by having variability defined on a population (=parameter) level and an individual (=observation) level, where the individual level depends on the parameter level. \n\n### Population (parameter) level\n\nThe population level is represented by an inter-individual variability (IIV) term, which assumes a log-normal distribution around a typical parameter value. In this simplified example we only consider IIV on clearance and do not consider any other random effects. The population (or parameter) level can be defined as follows:\n\n$$CL = \\theta_{TVCL} \\cdot e^{\\eta_{i}},~~~~~\\eta_{i} \\sim N(0, \\omega^2)$$\n\nHere, the clearance ($CL$) is modeled as a random variable following a log-normal distribution centered around the typical clearance value ($\\theta_{\\text{TVCL}}$) with variance $\\omega^2$. The random effect $\\eta_i$ itself follows a normal distribution $N(0, \\omega^2)$.\n\n### Individual (observation) level\n\nThe individual level on the other hand is defined by the observed concentrations for each subject and the predicted concentrations. The predictions are based on the structural model and dependent on the individual parameters. If I am not mistaken, this dependency is a representation of the hierarchical and nested nature of our NLME model. The individual level also incorporates residual unexplained variability (RUV), which is an important piece since it enables us to define the likelihood function in the end. The individual level can be defined by:\n\n$$Y_{ij} = f(x_{ij}; CL_i) + \\epsilon_{ij},~~~~~\\epsilon_{ij} \\sim N(0, \\sigma^2)$$\nwhere we can note that:\n\n- $Y_{ij}$ is the observed concentration for the $i^{th}$ individual at the $j^{th}$ time point, which would be one row (observation) of our dataset.\n- $f(x_{ij}; CL_i)$ is the predicted concentration. \n  - It contains the function $f()$, which represents e.g., the set of ODEs that describe the PK model. \n  - The function $f()$ depends on the individual clearance ($CL_i$, can be seen as a realization of the random variable $CL$) and the variable $x_{ij}$. \n  - This $x_{ij}$ contains all the information about covariates (if we would have any), dosing and sampling events for the $i^{th}$ individual at the $j^{th}$ time point.\n- $\\epsilon_{ij}$ is the residual unexplained variability for the $i^{th}$ individual at the $j^{th}$ time point. It typically follows a normal distribution $N(0, \\sigma^2)$\n\nIn our example we have two random variables, $Y_{ij}$ and $CL_i$, with parameters $\\beta := (\\theta_{TVCL}, \\omega^2, \\sigma^2)$. In our example we just want to estimate the typical clearance $\\theta_{TVCL}$ and the IIV on clearance $\\omega^2$. The residual unexplained variability $\\sigma^2$ is assumed to be known and fixed. Why do we do that? Just that we can plot the surface of our objective function value in 3D and better undestand how it looks like.\n\n## Maximum Likelihood estimation\n\nIn our simple case example (with fixed $V_D$ and fixed residual unexplained variability $\\sigma^2$), we have only two parameters to estimate: $\\theta_{TVCL}$ and $\\omega^2$. The overall goal? To infer the parameters of interest $(\\hat{\\theta}_{TVCL}, \\hat{\\omega^2})$ from our observed data $y_{1:n}$ by maximizing the log-likelihood ($ln ~L$) function:\n\n$$(\\hat{\\theta}_{TVCL}, \\hat{\\omega^2})_{ML} = \\underset{\\theta_{TVCL},~ \\omega^2}{\\mathrm{argmax}}~ln~L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}, CL_{i:n}\\right)$$\n\nTo align more with the notation in @wangDerivationVariousNONMEM2007, we can rather deal with the $\\eta_i$ values instead of the realization in the parameter space. We can write the likelihood as:\n\n$$(\\hat{\\theta}_{TVCL}, \\hat{\\omega^2})_{ML} = \\underset{\\theta_{TVCL},~ \\omega^2}{\\mathrm{argmax}}~ln~L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}, \\eta_{i:n}\\right)$$\n\n\n- However, the individual $\\eta_i$ values are so called unobserved latent variables. We can only directly observe the $y_i$ values, not the $\\eta_i$ values. Therefore, we cannot easily compute the joint likelihood.\n- Ansatz: We want to get rid of the dependence on $\\eta_i$ by working with the marginal likelihood.\n- The marginal likelihood is calculated by integrating out the individual parameters $\\eta_i$ (\"marginalizing out $\\eta_i$\"):\n\n$$(\\hat{\\theta}_{TVCL}, \\hat{\\omega^2})_{ML} = \\underset{\\theta_{TVCL}, \\omega^2}{\\mathrm{argmax}}~ln~L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}\\right)$$\n\nwith\n\n$$L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}\\right) = p(y_{1:n}; \\theta_{TVCL}, \\omega^2) = \\prod_{i=1}^n p(y_{i}; \\theta_{TVCL},~ \\omega^2)$$\n\n$$L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}\\right) = \\prod_{i=1}^n \\int p(y_{i}, \\eta_i; \\theta_{TVCL}, \\omega^2) \\cdot d\\eta_i $$\n\n- By integrating over all possible values of $\\eta_i$ we got rid of the dependence and are now left with teh marginal likelihood.\n- We can further split the marginal likelihood equation by using the chain rule of probability:\n\n$$L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}\\right) = \\prod_{i=1}^n \\int p(y_{i}| \\eta_i; \\theta_{TVCL}, \\omega^2) \\cdot p(\\eta_i | \\theta_{TVCL}, \\omega^2) \\cdot d\\eta_i$$\nAs $p(\\eta_i | \\theta_{TVCL}, \\omega^2)$ does actually not depend on $\\theta_{TVCL}$, and $p(y_{i}| \\eta_i; \\theta_{TVCL}, \\omega^2)$ does not actually depend on $\\omega^2$, we can simplify the equation to:\n\n\n$$L\\left(\\theta_{TVCL}, \\omega^2| y_{1:n}\\right) = \\prod_{i=1}^n \\int p(y_{i}| \\eta_i; \\theta_{TVCL}) \\cdot p(\\eta_i | \\omega^2) \\cdot d\\eta_i$$\n\n- The integral now contains two parts: The individual level $p(y_{i}| \\eta_i; \\theta_{TVCL})$ and the population level $p(\\eta_i | \\omega^2)$. The intuition behind this can be seen as follows: For a given $\\eta_i$ within the integral, the population term $p(\\eta_i |\\omega^2)$ tells us how likely it is to observe this $\\eta_i$ value in the population. The individual term $p(y_{i}| \\eta_i; \\theta_{TVCL})$ tells us how likely it is to observe the $y_i$ value given that particular $\\eta_i$ value. The Likelihood will be maximal when the product of both terms is maximal.\n- However, solving the marginal likelihood is much harder due to the integral. The question to answer is: \"How can we maximize the marginal log likelihood function?\"\n\n\n# Epilogue\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\"}\n## Session Information\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# display session info\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.1    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.1       htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.28   \n [9] knitr_1.48        jsonlite_1.8.8    xfun_0.49         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_0.24.0  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}